package com.einsteinford.kkweather.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.einsteinford.kkweather.bean.Basic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASIC".
*/
public class BasicDao extends AbstractDao<Basic, Void> {

    public static final String TABLENAME = "BASIC";

    /**
     * Properties of entity Basic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property City = new Property(0, String.class, "city", false, "CITY");
        public final static Property Cnty = new Property(1, String.class, "cnty", false, "CNTY");
        public final static Property Lat = new Property(2, String.class, "lat", false, "LAT");
        public final static Property Lon = new Property(3, String.class, "lon", false, "LON");
        public final static Property Basic_id = new Property(4, String.class, "basic_id", false, "BASIC_ID");
    }


    public BasicDao(DaoConfig config) {
        super(config);
    }
    
    public BasicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASIC\" (" + //
                "\"CITY\" TEXT NOT NULL ," + // 0: city
                "\"CNTY\" TEXT," + // 1: cnty
                "\"LAT\" TEXT," + // 2: lat
                "\"LON\" TEXT," + // 3: lon
                "\"BASIC_ID\" TEXT);"); // 4: basic_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Basic entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCity());
 
        String cnty = entity.getCnty();
        if (cnty != null) {
            stmt.bindString(2, cnty);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(3, lat);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(4, lon);
        }
 
        String basic_id = entity.getBasic_id();
        if (basic_id != null) {
            stmt.bindString(5, basic_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Basic entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCity());
 
        String cnty = entity.getCnty();
        if (cnty != null) {
            stmt.bindString(2, cnty);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(3, lat);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(4, lon);
        }
 
        String basic_id = entity.getBasic_id();
        if (basic_id != null) {
            stmt.bindString(5, basic_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Basic readEntity(Cursor cursor, int offset) {
        Basic entity = new Basic( //
            cursor.getString(offset + 0), // city
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cnty
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // basic_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Basic entity, int offset) {
        entity.setCity(cursor.getString(offset + 0));
        entity.setCnty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLat(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBasic_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Basic entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Basic entity) {
        return null;
    }

    @Override
    public boolean hasKey(Basic entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
